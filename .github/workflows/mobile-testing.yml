name: Mobile & Cross-Platform Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 8 * * 2' # Weekly on Tuesday at 8 AM UTC

jobs:
  mobile-browser-testing:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chrome, firefox, safari]
        device: [mobile, tablet, desktop]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Install Playwright
      run: npx playwright install --with-deps
    
    - name: Start application
      run: |
        npm start &
        sleep 30
      env:
        NODE_ENV: production
        DATABASE_URL: sqlite://./test.db
        SESSION_SECRET: test-secret
    
    - name: Run mobile tests
      run: |
        cat > playwright.config.js << EOF
        module.exports = {
          testDir: './tests',
          timeout: 30000,
          use: {
            baseURL: 'http://localhost:5000',
            viewport: ${{ matrix.device == 'mobile' && '{ width: 375, height: 667 }' || matrix.device == 'tablet' && '{ width: 768, height: 1024 }' || '{ width: 1920, height: 1080 }' }},
            userAgent: '${{ matrix.device == 'mobile' && 'Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X)' || matrix.device == 'tablet' && 'Mozilla/5.0 (iPad; CPU OS 14_7_1 like Mac OS X)' || 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)' }}'
          },
          projects: [{
            name: '${{ matrix.browser }}-${{ matrix.device }}',
            use: { ...devices['${{ matrix.browser == 'chrome' && 'Desktop Chrome' || matrix.browser == 'firefox' && 'Desktop Firefox' || 'Desktop Safari' }}'] }
          }]
        };
        EOF
        
        # Create basic mobile tests
        mkdir -p tests
        cat > tests/mobile-ui.spec.js << EOF
        const { test, expect } = require('@playwright/test');
        
        test('Mobile UI responsiveness', async ({ page }) => {
          await page.goto('/');
          
          // Check if mobile elements are visible
          const viewport = page.viewportSize();
          if (viewport.width <= 768) {
            await expect(page.locator('[data-testid="mobile-menu"]')).toBeVisible();
            await expect(page.locator('[data-testid="touch-bar"]')).toBeVisible();
          }
          
          // Test touch interactions
          await page.locator('body').tap();
          await page.screenshot({ path: 'mobile-screenshot-${{ matrix.browser }}-${{ matrix.device }}.png' });
        });
        
        test('Code editor mobile functionality', async ({ page }) => {
          await page.goto('/');
          
          // Test mobile code editor
          const editor = page.locator('.monaco-editor');
          if (await editor.isVisible()) {
            await editor.click();
            await page.keyboard.type('console.log("mobile test");');
          }
        });
        EOF
        
        npx playwright test
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: mobile-test-results-${{ matrix.browser }}-${{ matrix.device }}
        path: |
          test-results/
          *.png

  accessibility-testing:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        npm install -g @axe-core/cli
    
    - name: Build application
      run: npm run build
    
    - name: Start application
      run: |
        npm start &
        sleep 30
      env:
        NODE_ENV: production
        DATABASE_URL: sqlite://./test.db
        SESSION_SECRET: test-secret
    
    - name: Run accessibility tests
      run: |
        # Test main pages for accessibility
        axe http://localhost:5000 --save accessibility-report.json
        axe http://localhost:5000 --tags wcag2a,wcag2aa --save accessibility-detailed.json
    
    - name: Upload accessibility reports
      uses: actions/upload-artifact@v4
      with:
        name: accessibility-reports
        path: |
          accessibility-report.json
          accessibility-detailed.json

  performance-mobile:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Start application
      run: |
        npm start &
        sleep 30
      env:
        NODE_ENV: production
        DATABASE_URL: sqlite://./test.db
        SESSION_SECRET: test-secret
    
    - name: Create Lighthouse mobile config
      run: |
        cat > .lighthouserc-mobile.json << EOF
        {
          "ci": {
            "collect": {
              "url": ["http://localhost:5000"],
              "settings": {
                "preset": "perf",
                "emulatedFormFactor": "mobile",
                "throttling": {
                  "rttMs": 150,
                  "throughputKbps": 1638.4,
                  "cpuSlowdownMultiplier": 4
                }
              }
            },
            "assert": {
              "assertions": {
                "categories:performance": ["warn", {"minScore": 0.7}],
                "categories:accessibility": ["error", {"minScore": 0.9}],
                "categories:best-practices": ["warn", {"minScore": 0.8}],
                "categories:seo": ["warn", {"minScore": 0.8}]
              }
            }
          }
        }
        EOF
    
    - name: Run Lighthouse for mobile
      uses: treosh/lighthouse-ci-action@v12
      with:
        configPath: .lighthouserc-mobile.json
        uploadArtifacts: true
        temporaryPublicStorage: true

  touch-testing:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright
      run: npx playwright install --with-deps
    
    - name: Build application
      run: npm run build
    
    - name: Start application
      run: |
        npm start &
        sleep 30
      env:
        NODE_ENV: production
        DATABASE_URL: sqlite://./test.db
        SESSION_SECRET: test-secret
    
    - name: Run touch interaction tests
      run: |
        mkdir -p tests
        cat > tests/touch-interactions.spec.js << EOF
        const { test, expect } = require('@playwright/test');
        
        test.describe('Touch Interactions', () => {
          test('Touch bar functionality', async ({ page }) => {
            await page.goto('/');
            
            // Test touch bar interactions
            const touchBar = page.locator('[data-testid="mobile-touch-bar"]');
            if (await touchBar.isVisible()) {
              await touchBar.locator('button').first().tap();
            }
          });
          
          test('Swipe gestures', async ({ page }) => {
            await page.goto('/');
            
            // Simulate swipe gestures
            await page.touchscreen.tap(200, 300);
            await page.mouse.move(200, 300);
            await page.mouse.down();
            await page.mouse.move(400, 300);
            await page.mouse.up();
          });
          
          test('Pinch to zoom', async ({ page }) => {
            await page.goto('/');
            
            // Test zoom functionality
            await page.keyboard.press('Control+Equal'); // Zoom in
            await page.keyboard.press('Control+Minus'); // Zoom out
          });
        });
        EOF
        
        npx playwright test tests/touch-interactions.spec.js
    
    - name: Upload touch test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: touch-test-results
        path: test-results/