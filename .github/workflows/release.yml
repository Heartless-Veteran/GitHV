name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
        fi
    
    - name: Generate changelog
      id: changelog
      run: |
        if [ -f CHANGELOG.md ]; then
          # Extract changelog for this version
          awk '/^## \[${{ steps.get_version.outputs.version }}\]/{flag=1; next} /^## \[/{flag=0} flag' CHANGELOG.md > current_changelog.md
        else
          # Generate basic changelog from commits
          echo "## Changes" > current_changelog.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> current_changelog.md
        fi
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        release_name: GitHV v${{ steps.get_version.outputs.version }}
        body_path: current_changelog.md
        draft: false
        prerelease: false

  build-and-upload:
    needs: create-release
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        platform: [linux, windows, macos]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Create distribution package
      run: |
        mkdir -p dist-package
        cp -r dist/* dist-package/
        cp package.json dist-package/
        cp README.md dist-package/
        cp LICENSE dist-package/ 2>/dev/null || echo "LICENSE file not found"
        
        # Create platform-specific archive
        if [ "${{ matrix.platform }}" = "windows" ]; then
          cd dist-package && zip -r ../githv-v${{ needs.create-release.outputs.version }}-${{ matrix.platform }}.zip .
        else
          tar -czf githv-v${{ needs.create-release.outputs.version }}-${{ matrix.platform }}.tar.gz -C dist-package .
        fi
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./githv-v${{ needs.create-release.outputs.version }}-${{ matrix.platform }}.${{ matrix.platform == 'windows' && 'zip' || 'tar.gz' }}
        asset_name: githv-v${{ needs.create-release.outputs.version }}-${{ matrix.platform }}.${{ matrix.platform == 'windows' && 'zip' || 'tar.gz' }}
        asset_content_type: application/${{ matrix.platform == 'windows' && 'zip' || 'gzip' }}

  docker-release:
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        push: true
        tags: |
          ghcr.io/${{ github.repository }}:latest
          ghcr.io/${{ github.repository }}:v${{ needs.create-release.outputs.version }}
        platforms: linux/amd64,linux/arm64

  notify-deployment:
    needs: [create-release, build-and-upload, docker-release]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment success
      if: needs.build-and-upload.result == 'success' && needs.docker-release.result == 'success'
      run: |
        echo "‚úÖ Release v${{ needs.create-release.outputs.version }} created successfully!"
        echo "üì¶ Distribution packages uploaded"
        echo "üê≥ Docker images published"
        echo "üöÄ Ready for deployment"