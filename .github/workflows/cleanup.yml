name: Repository Cleanup

on:
  schedule:
    - cron: '0 5 * * 0' # Weekly on Sunday at 5 AM UTC
  workflow_dispatch: # Allow manual trigger

jobs:
  cleanup-branches:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Delete merged branches
      run: |
        # Get all remote branches that have been merged into main
        git remote prune origin
        merged_branches=$(git branch -r --merged main | grep -v 'main\|HEAD' | sed 's/origin\///' || true)
        
        if [ -n "$merged_branches" ]; then
          echo "Found merged branches to delete:"
          echo "$merged_branches"
          
          # Delete merged remote branches (be careful with this)
          # Uncomment the following lines if you want automatic deletion
          # for branch in $merged_branches; do
          #   git push origin --delete "$branch" || true
          # done
          
          echo "Merged branches found but not deleted automatically."
          echo "Review and delete manually if appropriate."
        else
          echo "No merged branches found for cleanup."
        fi

  cleanup-artifacts:
    runs-on: ubuntu-latest
    steps:
    - name: Delete old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          const thirtyDaysAgo = new Date();
          thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
          
          let deletedCount = 0;
          
          for (const artifact of artifacts.data.artifacts) {
            const createdAt = new Date(artifact.created_at);
            
            if (createdAt < thirtyDaysAgo) {
              try {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id
                });
                console.log(`Deleted artifact: ${artifact.name} (${artifact.created_at})`);
                deletedCount++;
              } catch (error) {
                console.log(`Failed to delete artifact ${artifact.name}: ${error.message}`);
              }
            }
          }
          
          console.log(`Deleted ${deletedCount} old artifacts`);

  cleanup-packages:
    runs-on: ubuntu-latest
    steps:
    - name: Delete old package versions
      uses: actions/github-script@v7
      with:
        script: |
          // Get all package versions for this repository
          try {
            const packages = await github.rest.packages.getAllPackageVersionsForPackageOwnedByOrg({
              package_type: 'container',
              package_name: context.repo.repo,
              org: context.repo.owner,
              per_page: 100
            });
            
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
            
            let deletedCount = 0;
            
            for (const version of packages.data) {
              const createdAt = new Date(version.created_at);
              
              // Keep tagged versions and recent versions
              if (createdAt < thirtyDaysAgo && !version.metadata?.container?.tags?.length) {
                try {
                  await github.rest.packages.deletePackageVersionForOrg({
                    package_type: 'container',
                    package_name: context.repo.repo,
                    org: context.repo.owner,
                    package_version_id: version.id
                  });
                  console.log(`Deleted package version: ${version.name} (${version.created_at})`);
                  deletedCount++;
                } catch (error) {
                  console.log(`Failed to delete package version ${version.name}: ${error.message}`);
                }
              }
            }
            
            console.log(`Deleted ${deletedCount} old package versions`);
          } catch (error) {
            console.log(`Package cleanup failed: ${error.message}`);
          }

  cleanup-caches:
    runs-on: ubuntu-latest
    steps:
    - name: Cleanup GitHub Actions caches
      uses: actions/github-script@v7
      with:
        script: |
          try {
            const caches = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            
            const sevenDaysAgo = new Date();
            sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
            
            let deletedCount = 0;
            
            for (const cache of caches.data.actions_caches) {
              const createdAt = new Date(cache.created_at);
              
              if (createdAt < sevenDaysAgo) {
                try {
                  await github.rest.actions.deleteActionsCacheById({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    cache_id: cache.id
                  });
                  console.log(`Deleted cache: ${cache.key} (${cache.created_at})`);
                  deletedCount++;
                } catch (error) {
                  console.log(`Failed to delete cache ${cache.key}: ${error.message}`);
                }
              }
            }
            
            console.log(`Deleted ${deletedCount} old caches`);
          } catch (error) {
            console.log(`Cache cleanup failed: ${error.message}`);
          }

  generate-cleanup-report:
    needs: [cleanup-branches, cleanup-artifacts, cleanup-packages, cleanup-caches]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Generate cleanup summary
      run: |
        echo "## Repository Cleanup Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Cleanup Jobs Status" >> $GITHUB_STEP_SUMMARY
        echo "- Branch cleanup: ${{ needs.cleanup-branches.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Artifact cleanup: ${{ needs.cleanup-artifacts.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Package cleanup: ${{ needs.cleanup-packages.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Cache cleanup: ${{ needs.cleanup-caches.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Cleanup completed on $(date)" >> $GITHUB_STEP_SUMMARY